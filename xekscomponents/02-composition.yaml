apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: x-eks-components
spec:
  compositeTypeRef:
    apiVersion: consumable.trustbank.sg/v1alpha1
    kind: xEksComponents
  patchSets:
  - name: clusterready-patchset
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.karpenterFargateStatus
      toFieldPath: metadata.labels["karpenterFargateStatus"]
      policy:
        fromFieldPath: Required
  resources:
  - name: x-configmap-envvar
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha2
      kind: Object
      metadata:
        name: xplane-eks-configmap-envvar
      spec:
        deletionPolicy: Orphan
        forProvider:
          manifest:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: xplane-configmap-envvar
              namespace: eksac
        managementPolicies:
        - Observe
        providerConfigRef:
          name: provider-kubernetes
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-configmap-envvar"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.clusterRef
        strategy: string
        string:
          fmt: "%s-xplane-configmap-envvar"
      toFieldPath: spec.forProvider.manifest.metadata.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.manifest.data.oidcIssuer
      toFieldPath: status.oidcIssuer
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.manifest.data.awsAccountId
      toFieldPath: status.awsAccountId
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.manifest.data.karpenterFargateStatus
      toFieldPath: status.karpenterFargateStatus
  - name: x-helm-metrics-server
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      metadata:
        name: xplane-helm-metrics-server
        annotations:
          crossplane.io/external-name: metrics-server
      spec:
        forProvider:
          chart:
            name: metrics-server
            repository: https://kubernetes-sigs.github.io/metrics-server/
            version: "3.12.1"
          namespace: metrics-server
          wait: true
        providerConfigRef:
          name: provider-helm
    patches:
    - type: PatchSet
      patchSetName: clusterready-patchset
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-helm-metrics-server"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.clusterRef
        strategy: string
        string:
          fmt: "provider-helm-%s"
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.components.metrics-server-helm.version
      toFieldPath: spec.forProvider.chart.version
  - name: x-iam-aws-loadbalancer-controller-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        name: xplane-aws-loadbalancer-controller-policy
      spec:
        deletionPolicy: Delete
        forProvider:
          policy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateServiceLinkedRole"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeAddresses",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeInternetGateways",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeVpcPeeringConnections",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeInstances",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeTags",
                    "ec2:GetCoipPoolUsage",
                    "ec2:DescribeCoipPools",
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "elasticloadbalancing:DescribeLoadBalancerAttributes",
                    "elasticloadbalancing:DescribeListeners",
                    "elasticloadbalancing:DescribeListenerCertificates",
                    "elasticloadbalancing:DescribeSSLPolicies",
                    "elasticloadbalancing:DescribeRules",
                    "elasticloadbalancing:DescribeTargetGroups",
                    "elasticloadbalancing:DescribeTargetGroupAttributes",
                    "elasticloadbalancing:DescribeTargetHealth",
                    "elasticloadbalancing:DescribeTags",
                    "elasticloadbalancing:DescribeTrustStores"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:DescribeUserPoolClient",
                    "acm:ListCertificates",
                    "acm:DescribeCertificate",
                    "iam:ListServerCertificates",
                    "iam:GetServerCertificate",
                    "waf-regional:GetWebACL",
                    "waf-regional:GetWebACLForResource",
                    "waf-regional:AssociateWebACL",
                    "waf-regional:DisassociateWebACL",
                    "wafv2:GetWebACL",
                    "wafv2:GetWebACLForResource",
                    "wafv2:AssociateWebACL",
                    "wafv2:DisassociateWebACL",
                    "shield:GetSubscriptionState",
                    "shield:DescribeProtection",
                    "shield:CreateProtection",
                    "shield:DeleteProtection"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:RevokeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateSecurityGroup"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags"
                  ],
                  "Resource": "arn:aws:ec2:*:*:security-group/*",
                  "Condition": {
                    "StringEquals": {
                      "ec2:CreateAction": "CreateSecurityGroup"
                    },
                    "Null": {
                      "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DeleteTags"
                  ],
                  "Resource": "arn:aws:ec2:*:*:security-group/*",
                  "Condition": {
                    "Null": {
                      "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                      "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:RevokeSecurityGroupIngress",
                    "ec2:DeleteSecurityGroup"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "Null": {
                      "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:CreateLoadBalancer",
                    "elasticloadbalancing:CreateTargetGroup"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "Null": {
                      "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:CreateListener",
                    "elasticloadbalancing:DeleteListener",
                    "elasticloadbalancing:CreateRule",
                    "elasticloadbalancing:DeleteRule"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:AddTags",
                    "elasticloadbalancing:RemoveTags"
                  ],
                  "Resource": [
                    "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                  ],
                  "Condition": {
                    "Null": {
                      "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                      "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:AddTags",
                    "elasticloadbalancing:RemoveTags"
                  ],
                  "Resource": [
                    "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                    "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                    "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                    "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:ModifyLoadBalancerAttributes",
                    "elasticloadbalancing:SetIpAddressType",
                    "elasticloadbalancing:SetSecurityGroups",
                    "elasticloadbalancing:SetSubnets",
                    "elasticloadbalancing:DeleteLoadBalancer",
                    "elasticloadbalancing:ModifyTargetGroup",
                    "elasticloadbalancing:ModifyTargetGroupAttributes",
                    "elasticloadbalancing:DeleteTargetGroup"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "Null": {
                      "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:AddTags"
                  ],
                  "Resource": [
                    "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "elasticloadbalancing:CreateAction": [
                        "CreateTargetGroup",
                        "CreateLoadBalancer"
                      ]
                    },
                    "Null": {
                      "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:RegisterTargets",
                    "elasticloadbalancing:DeregisterTargets"
                  ],
                  "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:SetWebAcl",
                    "elasticloadbalancing:ModifyListener",
                    "elasticloadbalancing:AddListenerCertificates",
                    "elasticloadbalancing:RemoveListenerCertificates",
                    "elasticloadbalancing:ModifyRule"
                  ],
                  "Resource": "*"
                }
              ]
            }
          tags:
            Name: xplane-aws-loadbalancer-controller-policy
            Owner: linus.yong
            Environment: sandbox
        providerConfigRef:
          name: provider-aws-iam
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-aws-loadbalancer-controller-policy"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-aws-loadbalancer-controller-policy"
      toFieldPath: spec.forProvider.tags.Name
  - name: x-iam-aws-loadbalancer-controller
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        name: xplane-aws-loadbalancer-controller-iam
      spec:
        deletionPolicy: Delete
        forProvider:
          tags:
            Name: xplane-aws-loadbalancer-controller-iam
            Owner: linus.yong
            Environment: sandbox
        providerConfigRef:
          name: provider-aws-iam
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-aws-loadbalancer-controller-iam"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-aws-loadbalancer-controller-iam"
      toFieldPath: spec.forProvider.tags.Name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: status.awsAccountId
        - fromFieldPath: status.oidcIssuer
        - fromFieldPath: status.oidcIssuer
        - fromFieldPath: status.oidcIssuer
        strategy: string
        string: 
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                      },
                      "Action": "sts:AssumeRoleWithWebIdentity",
                      "Condition": {
                          "StringEquals": {
                              "%s:aud": "sts.amazonaws.com",
                              "%s:sub": "system:serviceaccount:aws-load-balancer-controller:aws-load-balancer-controller-sa"
                          }
                      }
                  }
              ]
            }
      toFieldPath: spec.forProvider.assumeRolePolicy
      policy:
        fromFieldPath: Required
  - name: x-iam-aws-loadbalancer-controller-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      metadata:
        name: xplane-aws-loadbalancer-controller-policy-attachment
      spec:
        deletionPolicy: Delete
        forProvider:
          policyArnRef:
            name: xplane-aws-loadbalancer-controller-policy
          roleRef:
            name: xplane-aws-loadbalancer-controller-iam
        providerConfigRef:
          name: provider-aws-iam
    patches:
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-aws-loadbalancer-controller-policy-attachment"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-aws-loadbalancer-controller-policy"
      toFieldPath: spec.forProvider.policyArnRef.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-aws-loadbalancer-controller-iam"
      toFieldPath: spec.forProvider.roleRef.name
  - name: x-helm-aws-loadbalancer-controller
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      metadata:
        name: xplane-helm-aws-loadbalancer-controller
        annotations:
          crossplane.io/external-name: aws-load-balancer-controller
      spec:
        forProvider:
          chart:
            name: aws-load-balancer-controller
            repository: https://aws.github.io/eks-charts
            version: "1.8.1"
          namespace: aws-load-balancer-controller
          set:
          - name: clusterName
            value: xplane-eks-cluster
          - name: serviceAccount.name
            value: aws-load-balancer-controller-sa
          - name: serviceAccount.annotations.eks\.amazonaws\.com/role-arn
            value: arn:aws:iam::390945758345:role/xplane-aws-loadbalancer-controller-iam
          - name: replicaCount
            value: "1"
          - name: enableShield
            value: "false"
          - name: enableWaf
            value: "false"
          - name: enableWafv2
            value: "false"
          wait: true
        providerConfigRef:
          name: provider-helm
    patches:
    - type: PatchSet
      patchSetName: clusterready-patchset
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-helm-aws-loadbalancer-controller"
      toFieldPath: metadata.name
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.name
        strategy: string
        string:
          fmt: "%s-xplane-eks-cluster"
      toFieldPath: spec.forProvider.set[0].value
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: status.awsAccountId
        - fromFieldPath: spec.name
        strategy: string
        string: 
          fmt: arn:aws:iam::%s:role/%s-xplane-aws-loadbalancer-controller-iam
      toFieldPath: spec.forProvider.set[2].value
      policy:
        fromFieldPath: Required
    - type: CombineFromComposite
      combine:
        variables:
        - fromFieldPath: spec.clusterRef
        strategy: string
        string:
          fmt: "provider-helm-%s"
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.components.aws-loadbalancer-controller-helm.version
      toFieldPath: spec.forProvider.chart.version
  # - name: x-helm-vault
  #   base:
  #     apiVersion: helm.crossplane.io/v1beta1
  #     kind: Release
  #     metadata:
  #       name: xplane-helm-vault
  #       annotations:
  #         crossplane.io/external-name: vault
  #     spec:
  #       forProvider:
  #         chart:
  #           name: vault
  #           repository: https://helm.releases.hashicorp.com
  #           version: "0.28.1"
  #         namespace: vault
  #         set:
  #         - name: server.ha.enabled
  #           value: "true"
  #         - name: server.ha.replicas
  #           value: "3"
  #         - name: server.ha.raft.enabled
  #           value: "true"
  #         wait: true
  #       providerConfigRef:
  #         name: provider-helm
  #   patches:
  #   - type: PatchSet
  #     patchSetName: clusterready-patchset
  #   - type: CombineFromComposite
  #     combine:
  #       variables:
  #       - fromFieldPath: spec.name
  #       strategy: string
  #       string:
  #         fmt: "%s-xplane-helm-vault"
  #     toFieldPath: metadata.name
  #   - type: CombineFromComposite
  #     combine:
  #       variables:
  #       - fromFieldPath: spec.clusterRef
  #       strategy: string
  #       string:
  #         fmt: "provider-helm-%s"
  #     toFieldPath: spec.providerConfigRef.name
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.components.vault-helm.version
  #     toFieldPath: spec.forProvider.chart.version